// Generated by gencpp from file custom_msgs/container.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_CONTAINER_H
#define CUSTOM_MSGS_MESSAGE_CONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_msgs/signal.h>

namespace custom_msgs
{
template <class ContainerAllocator>
struct container_
{
  typedef container_<ContainerAllocator> Type;

  container_()
    : vector_name()
    , vector_len(0)
    , vector_obj()  {
    }
  container_(const ContainerAllocator& _alloc)
    : vector_name(_alloc)
    , vector_len(0)
    , vector_obj(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vector_name_type;
  _vector_name_type vector_name;

   typedef uint32_t _vector_len_type;
  _vector_len_type vector_len;

   typedef std::vector< ::custom_msgs::signal_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::custom_msgs::signal_<ContainerAllocator> >::other >  _vector_obj_type;
  _vector_obj_type vector_obj;





  typedef boost::shared_ptr< ::custom_msgs::container_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::container_<ContainerAllocator> const> ConstPtr;

}; // struct container_

typedef ::custom_msgs::container_<std::allocator<void> > container;

typedef boost::shared_ptr< ::custom_msgs::container > containerPtr;
typedef boost::shared_ptr< ::custom_msgs::container const> containerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::container_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::container_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'custom_msgs': ['/home/soya/Desktop/ros-msgs-structure/src/custom_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::container_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::container_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::container_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::container_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0483af8ff08c594e9b9f25c66714449c";
  }

  static const char* value(const ::custom_msgs::container_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0483af8ff08c594eULL;
  static const uint64_t static_value2 = 0x9b9f25c66714449cULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/container";
  }

  static const char* value(const ::custom_msgs::container_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string vector_name\n"
"uint32 vector_len\n"
"signal[] vector_obj\n"
"\n"
"================================================================================\n"
"MSG: custom_msgs/signal\n"
"string first_name\n"
"string last_name\n"
"uint8  age\n"
"uint32 scores\n"
;
  }

  static const char* value(const ::custom_msgs::container_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::container_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vector_name);
      stream.next(m.vector_len);
      stream.next(m.vector_obj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct container_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::container_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::container_<ContainerAllocator>& v)
  {
    s << indent << "vector_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vector_name);
    s << indent << "vector_len: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vector_len);
    s << indent << "vector_obj[]" << std::endl;
    for (size_t i = 0; i < v.vector_obj.size(); ++i)
    {
      s << indent << "  vector_obj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::custom_msgs::signal_<ContainerAllocator> >::stream(s, indent + "    ", v.vector_obj[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_CONTAINER_H
